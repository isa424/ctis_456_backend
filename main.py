# -*- coding: utf-8 -*-
"""bitirme.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rjG3fI4l1pO4tK0N5T4IxmPPa4dfLGyL
"""

import moviepy.editor as mp
!pip install SpeechRecognition
import speech_recognition as sr

from google.colab import drive

drive.mount('/content/gdrive')

clip = mp.VideoFileClip("/content/gdrive/MyDrive/deneme/finaldemosu.mp4")
clip.audio.write_audiofile("/content/gdrive/MyDrive/deneme/finaldemosu.wav")

sound = "/content/gdrive/MyDrive/deneme/tolga_germinal.wav"
    

r = sr.Recognizer()
with sr.AudioFile(sound) as source:
        #r.adjust_for_ambient_noise(source)
        print("converting audio file to text")

        audio = r.listen(source)
        try:
            print("Converted audio is : \n" + r.recognize_google(audio,language="tr"))
            sentence = r.recognize_google(audio,language="tr")
            
        except Exception as e:
            print(e)

!pip install googletrans

!pip install ibm_watson

apikey = '3Jiz2dGhHf3GTpZODtcZESuc6sv7eaNRYPba1X4o8RD8'
url = 'https://api.eu-de.language-translator.watson.cloud.ibm.com/instances/1d900495-d32a-4d9a-a9c4-a94da1a18159'

# import deps
from ibm_watson import LanguageTranslatorV3
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator

# Setup service
authenticator = IAMAuthenticator(apikey)
lt = LanguageTranslatorV3(version='2018-05-01', authenticator=authenticator)
lt.set_service_url(url)

sentence="Ben Tolga. Bilken Üniversitesi son sınıf öğrencisiyim. Bu video proje için deneme amaçlı çekilmiştir. Sizin için yolluyorum."
translation = lt.translate(text=sentence, model_id='tr-en').get_result()

translation

translation['translations'][0]['translation']

language = lt.identify('Wir si nken.').get_result()

language









# Cloning the repository
!git clone https://github.com/misbah4064/Real-Time-Voice-Cloning.git

# Commented out IPython magic to ensure Python compatibility.
# Changing the current directory to the repository's directory
# %cd Real-Time-Voice-Cloning/

# Installing the dependencies
!pip install -q -r requirements.txt
!apt-get install -qq libportaudio2

# Downloading pretrained data and unzipping it
!gdown https://drive.google.com/uc?id=1n1sPXvT34yXFLT47QZA6FIRGrwMeSsZc
!unzip /content/gdrive/MyDrive/pretrained.zip

# Initializing all the encoder libraries
from IPython.display import Audio
from IPython.utils import io
from synthesizer.inference import Synthesizer
from encoder import inference as encoder
from vocoder import inference as vocoder
from pathlib import Path
import numpy as np
import librosa
encoder_weights = Path("encoder/saved_models/pretrained.pt")
vocoder_weights = Path("vocoder/saved_models/pretrained/pretrained.pt")
syn_dir = Path("synthesizer/saved_models/logs-pretrained/taco_pretrained")
encoder.load_model(encoder_weights)
synthesizer = Synthesizer(syn_dir)
vocoder.load_model(vocoder_weights)

text = translation['translations'][0]['translation']

import soundfile

in_fpath = Path("/content/gdrive/MyDrive/deneme/tolga_germinal.wav")
reprocessed_wav = encoder.preprocess_wav(in_fpath)
original_wav, sampling_rate = librosa.load(in_fpath)
preprocessed_wav = encoder.preprocess_wav(original_wav, sampling_rate)
embed = encoder.embed_utterance(preprocessed_wav)
with io.capture_output() as captured:
  specs = synthesizer.synthesize_spectrograms([text], [embed])
generated_wav = vocoder.infer_waveform(specs[0])
generated_wav2 = vocoder.infer_waveform(specs[0])
generated_wav = np.pad(generated_wav, (0, synthesizer.sample_rate), mode="constant")
soundfile.write('/content/gdrive/MyDrive/deneme/tolga_germinal2.wav',generated_wav, sampling_rate)
display(Audio(generated_wav, rate=synthesizer.sample_rate))



!pip install ffmpeg-python

import ffmpeg

!ffmpeg -i /content/gdrive/MyDrive/deneme/proje1.mp4 -c copy -an /content/gdrive/MyDrive/deneme/proje2.mp4









import moviepy.editor as mpe

clip = mpe.VideoFileClip("/content/gdrive/MyDrive/deneme/finaldemosutolga.mp4")
import pathlib
#file_extension = pathlib.Path(generated_wav).suffix 
#print(file_extension)

audio_bg = mpe.AudioFileClip("/content/gdrive/MyDrive/deneme/tolgadehmen2.wav")

final_audio = mpe.CompositeAudioClip([audio_bg,clip.audio])
final_clip = clip.set_audio(final_audio)
final_clip.write_videofile("/content/gdrive/MyDrive/deneme/finaldemosusonuctolga.mp4")













